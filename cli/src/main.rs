
use std::fs::File;
use std::io::BufWriter;

use rpu::RPU;

fn get_time() -> u128 {
    let stop = std::time::SystemTime::now()
        .duration_since(std::time::UNIX_EPOCH)
        .expect("Time went backwards");
        stop.as_millis()
}

fn main() {

    let width = 300;
    let height = 300;

    let mut buffer = vec![0;width * height * 4];

    let mut rpu = RPU::new(width, height);

    let start = get_time();
    rpu.render(&mut buffer[..], (0, 0, width, height));
    let t = get_time() - start;

    // println!("{:?}", rc);
    println!("Executed in {} ms", t as f64);

    // Write it to file

    let path = "image.png";
    let file = File::create(path).unwrap();
    let ref mut w = BufWriter::new(file);

    let mut encoder = png::Encoder::new(w, width as u32, height as u32);
    encoder.set_color(png::ColorType::Rgba);
    encoder.set_depth(png::BitDepth::Eight);
    // Adding text chunks to the header
    encoder
        .add_text_chunk(
            "ForgedThoughts".to_string(),
            "This image was procedurally generated by ForgedThoughts.".to_string(),
        )
        .unwrap();

    let mut writer = encoder.write_header().unwrap();

    writer.write_image_data(&buffer).unwrap(); // Save
}